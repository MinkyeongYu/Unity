1. 그래프
    > 정점 : 데이터
    > 간선 : 정점들을 연결하는 선
    (ex) 소셜 네트워크 관계도
2. 가중치 그래프
    (ex) 지하철 노선도 
3. 방향 그래프
    (ex) 일방통행이 포함된 도로망, 두 사람 사이의 호감도
4. 방향 그래프를 코드로 나타내기
class Vertex {
    ; 간선 리스트
    public List<Vertex> edges = new List<Vertex>();
}
class CreateGraph {
    ; 노드 리스트
    List<Vertex> v = new List<Vertex>(6) {
        new Vertex();
        new Vertex();
        new Vertex();
        new Vertex();
        new Vertex();
        new Vertex(); 
    }
    ; 각 노드의 간선 리스트에 자신이 가리키는 노드 삽입.
    v[0].edges.Add(v[1]);
    v[0].edges.Add(v[3]);
    v[1].edges.Add(v[0]);
    v[1].edges.Add(v[2]);
    v[1].edges.Add(v[3]);
    v[3].edges.Add(v[4]);
    v[5].edges.Add(v[4]);
}
; 하지만 위 방법은 인스턴스를 계속 생성해야하기 때문에 부담이 된다. 따라서..
List<int>[] adjacent = new List<int>[6] {
    new List<int> {1, 3},
    new List<int> {0, 2, 3},
    new List<int> {},
    new List<int> {4},
    new List<int> {},
    new List<int> {4}
}
; 위와 같이 리스트를 이용한 그래프 표현을 사용한다. 읽는 방법 : adjacent[from] -> 연결된 목록.
; 단, 메모리를 아낄 수는 있지만, 임의로 접근이 불가능하고, 순행하며 접근하기 때문에 접근속도에서 손해를 볼 수 있다.(간선이 적고, 정점이 많은 경우에는 이득)
5. 가중치 방향 그래프 코드로 표현
class Edge {
    public Edge(int v, int w) {
        ; 가리키는 정점
        vertex = v;
        ; 가중치
        weight = w;
    }
    public int vertex;
    public int weight;
}

List<int>[] adjacent = new List<int>[6] {
    new List<int> {new Edge(1, 15), new Edge(3,35)},
    new List<int> {new Edge(0, 15), new Edge(2, 5), new Edge(3, 10)},
    new List<int> { },
    new List<int> {new Edge(4, 5)},
    new List<int> {},
    new List<int> {new Edge(4, 5)},
}
6. 리스트로 표현할때 접근속도 한계점을 극복하기 위해 행렬로 표현
int [,] adjacent = new int[6,6] {
    {0, 1, 0, 1, 0, 0},
    {1, 0, 1, 1, 0, 0},
    {0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 1, 0},
    {0, 0, 0, 0, 0, 0}.
    {0, 0, 0, 0, 1, 0}
}; 
; 간선이 많고, 정점이 적은 경우에 적당하다. 메모리 소모가 크지만, 빠른 접근이 가능하다.
7. 가중치 그래프 행렬로 표현
int [,] adjacent = new int[6,6] { 
    {-1, 15, -1, 35, -1, -1},
    {15, -1, 5, 10, -1, -1},
    {-1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, 5, -1},
    {-1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, 5, -1}
};

// 보통 연결리스트로 큐를 구현하는 것은 사용하지 않는 방식이고, 대신 연결리스트로 순환버퍼를 구현한다.  
// Stack<int> _stack = new Stack<int>();
// Queue<int> _queue = new Queue<int>();
// LinkedList<int> list = new LinkedList<int>();

// // 삽입
// _stack.Push(101);
// _stack.Push(102);
// _stack.Push(103);
// _stack.Push(104);
// _stack.Push(105);

// if(_stack.Count > 0)
//     // 마지막으로 삽입된 105가 삭제되고, 변수에 저장됨. LIFO 
//     int _value = _stack.Pop();
// // 맨 뒤 104 참조 및 변수에 저장.
// int _value2 = _stack.Peek();

// // 삽입
// _queue.Enqueue(101);
// _queue.Enqueue(102);
// _queue.Enqueue(103);
// _queue.Enqueue(104);
// _queue.Enqueue(105);

// if(_queue.Count > 0) 
//     // 맨 앞 101 삭제, 변수에 저장. FIFO
//     int _data = _queue.Dequeue();
// // 맨 앞 102 참조. 변수에 저장.
// int _data2 = _queue.Peek(); 

// // 삽입
// list.AddLast(101);
// list.AddLast(102);
// list.AddLast(103);
// list.AddLast(104);
// list.AddLast(105);

// if(list.size > 0) 
//     int val = list.First.Value;
//     // 맨 앞 element 삭제. 반환은 안됨.
//     list.RemoveFirst();
//     int val2 = list.Last.Value;
//     // 맨 뒤 element 삭제. 반환 안됨.
//     list.RemoveLast();
// // 103 값을 가진 element 삭제
// list.Remove(103);

// 그래프 실습
// 보통 연결리스트로 큐를 구현하는 것은 사용하지 않는 방식이고, 대신 연결리스트로 순환버퍼를 구현한다.  
// Stack<int> _stack = new Stack<int>();
// Queue<int> _queue = new Queue<int>();
// LinkedList<int> list = new LinkedList<int>();

// // 삽입
// _stack.Push(101);
// _stack.Push(102);
// _stack.Push(103);
// _stack.Push(104);
// _stack.Push(105);

// if(_stack.Count > 0)
//     // 마지막으로 삽입된 105가 삭제되고, 변수에 저장됨. LIFO 
//     int _value = _stack.Pop();
// // 맨 뒤 104 참조 및 변수에 저장.
// int _value2 = _stack.Peek();

// // 삽입
// _queue.Enqueue(101);
// _queue.Enqueue(102);
// _queue.Enqueue(103);
// _queue.Enqueue(104);
// _queue.Enqueue(105);

// if(_queue.Count > 0) 
//     // 맨 앞 101 삭제, 변수에 저장. FIFO
//     int _data = _queue.Dequeue();
// // 맨 앞 102 참조. 변수에 저장.
// int _data2 = _queue.Peek(); 

// // 삽입
// list.AddLast(101);
// list.AddLast(102);
// list.AddLast(103);
// list.AddLast(104);
// list.AddLast(105);

// if(list.size > 0) 
//     int val = list.First.Value;
//     // 맨 앞 element 삭제. 반환은 안됨.
//     list.RemoveFirst();
//     int val2 = list.Last.Value;
//     // 맨 뒤 element 삭제. 반환 안됨.
//     list.RemoveLast();
// // 103 값을 가진 element 삭제
// list.Remove(103);

// 그래프 실습
// List<int> list = new List<int>() {1, 2, 3, 4};

// for(int i=0; i<list.Count; i++) {
//     Console.WriteLine(list[i]);
// }
// foreach(int val in list) {
//     Console.WriteLine(val);
// }

